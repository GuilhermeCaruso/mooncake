// ############################
// Generated by Mooncake
// Date: 2022-08-28 17:30:16
// Source: examples/interfaces/example.go
// ############################
package mocks

import (
	"reflect"

	"github.com/GuilhermeCaruso/mooncake"
)

type MockSimpleInterface struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockSimpleInterface
}

func NewMockSimpleInterface(agent *mooncake.MooncakeAgent) *MockSimpleInterface {
	internal := new(MockSimpleInterface)
	internal.agent = agent
	internal.internalController = &InternalMockSimpleInterface{
		mock: internal,
	}
	return internal
}

func (m *MockSimpleInterface) Get() (result0 string, result1 error) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0, _ = result[0].Value.(string)
	result1, _ = result[1].Value.(error)

	return
}

func (immi *MockSimpleInterface) Prepare() *InternalMockSimpleInterface {
	return immi.internalController
}

type InternalMockSimpleInterface struct {
	mock *MockSimpleInterface
}

func (im *InternalMockSimpleInterface) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockSimpleInterface)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}

type MockNestedInterface struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockNestedInterface
}

func NewMockNestedInterface(agent *mooncake.MooncakeAgent) *MockNestedInterface {
	internal := new(MockNestedInterface)
	internal.agent = agent
	internal.internalController = &InternalMockNestedInterface{
		mock: internal,
	}
	return internal
}

func (m *MockNestedInterface) Get() (result0 string, result1 error) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0, _ = result[0].Value.(string)
	result1, _ = result[1].Value.(error)

	return
}

func (immi *MockNestedInterface) Prepare() *InternalMockNestedInterface {
	return immi.internalController
}

type InternalMockNestedInterface struct {
	mock *MockNestedInterface
}

func (im *InternalMockNestedInterface) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockNestedInterface)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}
