// ############################
// Generated by Mooncake
// Date: 2022-08-28 17:27:59
// Source: examples/interfaces/example.go
// ############################
package mocks

import (
	"reflect"
	"github.com/GuilhermeCaruso/mooncake"
)
type MockSimpleInterface struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockSimpleInterface
}

func NewMockSimpleInterface(agent *mooncake.MooncakeAgent) *MockSimpleInterface {
	internal := new(MockSimpleInterface)
	internal.agent = agent
	internal.internalController = &InternalMockSimpleInterface{
		mock: internal,
	}
	return internal
}

func(m *MockSimpleInterface) Get() (result0 string, result1 error) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)
	result1,_ = result[1].Value.(error)

	return
}


func (immi *MockSimpleInterface) Prepare() *InternalMockSimpleInterface {
	return immi.internalController
}

type InternalMockSimpleInterface struct {
	mock *MockSimpleInterface
}


func (im *InternalMockSimpleInterface) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockSimpleInterface)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}


type MockNestedInterface struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockNestedInterface
}

func NewMockNestedInterface(agent *mooncake.MooncakeAgent) *MockNestedInterface {
	internal := new(MockNestedInterface)
	internal.agent = agent
	internal.internalController = &InternalMockNestedInterface{
		mock: internal,
	}
	return internal
}

func(m *MockNestedInterface) Get() (result0 string, result1 error) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)
	result1,_ = result[1].Value.(error)

	return
}


func (immi *MockNestedInterface) Prepare() *InternalMockNestedInterface {
	return immi.internalController
}

type InternalMockNestedInterface struct {
	mock *MockNestedInterface
}


func (im *InternalMockNestedInterface) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockNestedInterface)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}


type MockGenericInterface[T, Z any] struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockGenericInterface[T, Z]
}

func NewMockGenericInterface[T, Z any](agent *mooncake.MooncakeAgent) *MockGenericInterface[T, Z] {
	internal := new(MockGenericInterface[T, Z])
	internal.agent = agent
	internal.internalController = &InternalMockGenericInterface[T, Z]{
		mock: internal,
	}
	return internal
}

func(m *MockGenericInterface[T, Z]) Test(param0 T) (result0 T, result1 Z) {
	method := "Test"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(T)
	result1,_ = result[1].Value.(Z)

	return
}


func (immi *MockGenericInterface[T, Z]) Prepare() *InternalMockGenericInterface[T, Z] {
	return immi.internalController
}

type InternalMockGenericInterface[T, Z any] struct {
	mock *MockGenericInterface[T, Z]
}


func (im *InternalMockGenericInterface[T, Z]) Test(param0 T) *mooncake.AgentController {
	method := "Test"
	methodType := reflect.TypeOf((*MockGenericInterface[T, Z])(nil).Test)

	return im.mock.agent.SetCall(method, methodType)
}


type MockGenericNestedInterface[T, Z any] struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockGenericNestedInterface[T, Z]
}

func NewMockGenericNestedInterface[T, Z any](agent *mooncake.MooncakeAgent) *MockGenericNestedInterface[T, Z] {
	internal := new(MockGenericNestedInterface[T, Z])
	internal.agent = agent
	internal.internalController = &InternalMockGenericNestedInterface[T, Z]{
		mock: internal,
	}
	return internal
}

func (immi *MockGenericNestedInterface[T, Z]) Prepare() *InternalMockGenericNestedInterface[T, Z] {
	return immi.internalController
}

type InternalMockGenericNestedInterface[T, Z any] struct {
	mock *MockGenericNestedInterface[T, Z]
}

