// ############################
// Generated by Mooncake
// Date: 2022-08-28 04:07:19
// Source: examples/interfaces/nested.go
// ############################
package mocks

import (
	"context"
	"time"
	"reflect"
	"github.com/GuilhermeCaruso/mooncake"
)
type MockOther struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockOther
}

func NewMockOther(agent *mooncake.MooncakeAgent) *MockOther {
	internal := new(MockOther)
	internal.agent = agent
	internal.internalController = &InternalMockOther{
		mock: internal,
	}
	return internal
}

func(m *MockOther) Get() (result0 string) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)

	return
}


func (immi *MockOther) Prepare() *InternalMockOther {
	return immi.internalController
}

type InternalMockOther struct {
	mock *MockOther
}


func (im *InternalMockOther) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockOther)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}


type MockInternalInterface struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockInternalInterface
}

func NewMockInternalInterface(agent *mooncake.MooncakeAgent) *MockInternalInterface {
	internal := new(MockInternalInterface)
	internal.agent = agent
	internal.internalController = &InternalMockInternalInterface{
		mock: internal,
	}
	return internal
}

func(m *MockInternalInterface) ReturnContext(param0 context.Context) (result0 context.Context) {
	method := "ReturnContext"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(context.Context)

	return
}


func(m *MockInternalInterface) NewMethod(param0 string) (result0 string, result1 int, result2 time.Ticker) {
	method := "NewMethod"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)
	result1,_ = result[1].Value.(int)
	result2,_ = result[2].Value.(time.Ticker)

	return
}


func (immi *MockInternalInterface) Prepare() *InternalMockInternalInterface {
	return immi.internalController
}

type InternalMockInternalInterface struct {
	mock *MockInternalInterface
}


func (im *InternalMockInternalInterface) ReturnContext(param0 context.Context) *mooncake.AgentController {
	method := "ReturnContext"
	methodType := reflect.TypeOf((*MockInternalInterface)(nil).ReturnContext)

	return im.mock.agent.SetCall(method, methodType)
}


func (im *InternalMockInternalInterface) NewMethod(param0 string) *mooncake.AgentController {
	method := "NewMethod"
	methodType := reflect.TypeOf((*MockInternalInterface)(nil).NewMethod)

	return im.mock.agent.SetCall(method, methodType)
}


type MockInterfaceGeneric[T, Z any] struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockInterfaceGeneric[T, Z]
}

func NewMockInterfaceGeneric[T, Z any](agent *mooncake.MooncakeAgent) *MockInterfaceGeneric[T, Z] {
	internal := new(MockInterfaceGeneric[T, Z])
	internal.agent = agent
	internal.internalController = &InternalMockInterfaceGeneric[T, Z]{
		mock: internal,
	}
	return internal
}

func(m *MockInterfaceGeneric[T, Z]) Test(param0 T) (result0 T) {
	method := "Test"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(T)

	return
}


func (immi *MockInterfaceGeneric[T, Z]) Prepare() *InternalMockInterfaceGeneric[T, Z] {
	return immi.internalController
}

type InternalMockInterfaceGeneric[T, Z any] struct {
	mock *MockInterfaceGeneric[T, Z]
}


func (im *InternalMockInterfaceGeneric[T, Z]) Test(param0 T) *mooncake.AgentController {
	method := "Test"
	methodType := reflect.TypeOf((*MockInterfaceGeneric[T, Z])(nil).Test)

	return im.mock.agent.SetCall(method, methodType)
}


type MockInterfaceMultiple[T any,Z any] struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockInterfaceMultiple[T, Z]
}

func NewMockInterfaceMultiple[T any,Z any](agent *mooncake.MooncakeAgent) *MockInterfaceMultiple[T, Z] {
	internal := new(MockInterfaceMultiple[T, Z])
	internal.agent = agent
	internal.internalController = &InternalMockInterfaceMultiple[T, Z]{
		mock: internal,
	}
	return internal
}

func(m *MockInterfaceMultiple[T, Z]) Test(param0 T) (result0 T, result1 Z) {
	method := "Test"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(T)
	result1,_ = result[1].Value.(Z)

	return
}


func (immi *MockInterfaceMultiple[T, Z]) Prepare() *InternalMockInterfaceMultiple[T, Z] {
	return immi.internalController
}

type InternalMockInterfaceMultiple[T any,Z any] struct {
	mock *MockInterfaceMultiple[T, Z]
}


func (im *InternalMockInterfaceMultiple[T, Z]) Test(param0 T) *mooncake.AgentController {
	method := "Test"
	methodType := reflect.TypeOf((*MockInterfaceMultiple[T, Z])(nil).Test)

	return im.mock.agent.SetCall(method, methodType)
}


type MockRootInterface struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockRootInterface
}

func NewMockRootInterface(agent *mooncake.MooncakeAgent) *MockRootInterface {
	internal := new(MockRootInterface)
	internal.agent = agent
	internal.internalController = &InternalMockRootInterface{
		mock: internal,
	}
	return internal
}

func(m *MockRootInterface) ReturnContext(param0 context.Context) (result0 context.Context) {
	method := "ReturnContext"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(context.Context)

	return
}


func(m *MockRootInterface) NewMethod(param0 string) (result0 string, result1 int, result2 time.Ticker) {
	method := "NewMethod"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)
	result1,_ = result[1].Value.(int)
	result2,_ = result[2].Value.(time.Ticker)

	return
}


func (immi *MockRootInterface) Prepare() *InternalMockRootInterface {
	return immi.internalController
}

type InternalMockRootInterface struct {
	mock *MockRootInterface
}


func (im *InternalMockRootInterface) ReturnContext(param0 context.Context) *mooncake.AgentController {
	method := "ReturnContext"
	methodType := reflect.TypeOf((*MockRootInterface)(nil).ReturnContext)

	return im.mock.agent.SetCall(method, methodType)
}


func (im *InternalMockRootInterface) NewMethod(param0 string) *mooncake.AgentController {
	method := "NewMethod"
	methodType := reflect.TypeOf((*MockRootInterface)(nil).NewMethod)

	return im.mock.agent.SetCall(method, methodType)
}


type MockRootInterfaceWithTwo struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockRootInterfaceWithTwo
}

func NewMockRootInterfaceWithTwo(agent *mooncake.MooncakeAgent) *MockRootInterfaceWithTwo {
	internal := new(MockRootInterfaceWithTwo)
	internal.agent = agent
	internal.internalController = &InternalMockRootInterfaceWithTwo{
		mock: internal,
	}
	return internal
}

func(m *MockRootInterfaceWithTwo) Internal(param0 string) (result0 string) {
	method := "Internal"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)

	return
}


func(m *MockRootInterfaceWithTwo) ReturnContext(param0 context.Context) (result0 context.Context) {
	method := "ReturnContext"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(context.Context)

	return
}


func(m *MockRootInterfaceWithTwo) NewMethod(param0 string) (result0 string, result1 int, result2 time.Ticker) {
	method := "NewMethod"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)
	result1,_ = result[1].Value.(int)
	result2,_ = result[2].Value.(time.Ticker)

	return
}


func(m *MockRootInterfaceWithTwo) Get() (result0 string) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)

	return
}


func (immi *MockRootInterfaceWithTwo) Prepare() *InternalMockRootInterfaceWithTwo {
	return immi.internalController
}

type InternalMockRootInterfaceWithTwo struct {
	mock *MockRootInterfaceWithTwo
}


func (im *InternalMockRootInterfaceWithTwo) Internal(param0 string) *mooncake.AgentController {
	method := "Internal"
	methodType := reflect.TypeOf((*MockRootInterfaceWithTwo)(nil).Internal)

	return im.mock.agent.SetCall(method, methodType)
}


func (im *InternalMockRootInterfaceWithTwo) ReturnContext(param0 context.Context) *mooncake.AgentController {
	method := "ReturnContext"
	methodType := reflect.TypeOf((*MockRootInterfaceWithTwo)(nil).ReturnContext)

	return im.mock.agent.SetCall(method, methodType)
}


func (im *InternalMockRootInterfaceWithTwo) NewMethod(param0 string) *mooncake.AgentController {
	method := "NewMethod"
	methodType := reflect.TypeOf((*MockRootInterfaceWithTwo)(nil).NewMethod)

	return im.mock.agent.SetCall(method, methodType)
}


func (im *InternalMockRootInterfaceWithTwo) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockRootInterfaceWithTwo)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}

