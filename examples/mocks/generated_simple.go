// ############################
// Generated by Mooncake
// Date: 2022-08-28 04:07:19
// Source: examples/interfaces/simple.go
// ############################
package mocks

import (
	"github.com/GuilhermeCaruso/mooncake/generator/models"
	"reflect"
	"github.com/GuilhermeCaruso/mooncake"
)
type MockSimple struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockSimple
}

func NewMockSimple(agent *mooncake.MooncakeAgent) *MockSimple {
	internal := new(MockSimple)
	internal.agent = agent
	internal.internalController = &InternalMockSimple{
		mock: internal,
	}
	return internal
}

func(m *MockSimple) Get() (result0 string, result1 error) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(string)
	result1,_ = result[1].Value.(error)

	return
}


func (immi *MockSimple) Prepare() *InternalMockSimple {
	return immi.internalController
}

type InternalMockSimple struct {
	mock *MockSimple
}


func (im *InternalMockSimple) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockSimple)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}


type MockSimpleWithRef struct {
	agent              *mooncake.MooncakeAgent
	internalController *InternalMockSimpleWithRef
}

func NewMockSimpleWithRef(agent *mooncake.MooncakeAgent) *MockSimpleWithRef {
	internal := new(MockSimpleWithRef)
	internal.agent = agent
	internal.internalController = &InternalMockSimpleWithRef{
		mock: internal,
	}
	return internal
}

func(m *MockSimpleWithRef) Get() (result0 models.File) {
	method := "Get"

	result := m.agent.GetCall(method)

	result0,_ = result[0].Value.(models.File)

	return
}


func (immi *MockSimpleWithRef) Prepare() *InternalMockSimpleWithRef {
	return immi.internalController
}

type InternalMockSimpleWithRef struct {
	mock *MockSimpleWithRef
}


func (im *InternalMockSimpleWithRef) Get() *mooncake.AgentController {
	method := "Get"
	methodType := reflect.TypeOf((*MockSimpleWithRef)(nil).Get)

	return im.mock.agent.SetCall(method, methodType)
}

